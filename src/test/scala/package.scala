package cl.ravenhill

import org.scalacheck.{Arbitrary, Gen}
import org.scalatest.prop.Configuration.MinSize

import scala.collection.immutable

package object composerr {
  /** Generates an arbitrary primitive value of any supported type.
   *
   * This generator randomly produces a value of one of the following types: Boolean, Byte, Char, Short, Int, Float,
   * Double, or String.
   *
   * @return A generator that produces a random primitive value.
   */
  def arbAnyPrimitive: Gen[Any] = Gen.oneOf(
    Arbitrary.arbBool.arbitrary,
    Arbitrary.arbByte.arbitrary,
    Arbitrary.arbChar.arbitrary,
    Arbitrary.arbShort.arbitrary,
    Arbitrary.arbInt.arbitrary,
    Arbitrary.arbFloat.arbitrary,
    Arbitrary.arbDouble.arbitrary,
    Arbitrary.arbString.arbitrary
  )

  /** Generates an arbitrary list of elements of type `T`.
   *
   * This generator produces a list of a specified size, filled with random elements generated by the provided
   * `elementGen` generator. The size of the list is determined by the provided `size` generator, which by default
   * generates an integer between 0 and 100.
   *
   * @param elementGen A generator that produces elements of type `T` to populate the list.
   * @param size       A generator that determines the size of the list. Defaults to a generator that produces an
   *                   integer between 0 and 100.
   * @tparam T The type of elements in the generated list.
   * @return A generator that produces a list of random elements of type `T`.
   */
  def arbList[T](elementGen: Gen[T], size: Gen[Int] = Gen.chooseNum(0, 100)): Gen[List[T]] = for {
    size <- size
  } yield List.fill(size)(elementGen.sample.get)

  /** Generates an arbitrary set of elements of type `T`.
   *
   * This generator produces a set of a specified size, filled with random elements generated by the provided
   * `elementGen` generator. The size of the set is determined by the provided `size` generator, which by default
   * generates an integer between 0 and 100.
   *
   * @param elementGen A generator that produces elements of type `T` to populate the set.
   * @param size A generator that determines the size of the set. Defaults to a generator that produces an integer
   *             between 0 and 100.
   * @tparam T The type of elements in the generated set.
   * @return A generator that produces a set of random elements of type `T`.
   */
  def arbSet[T](elementGen: Gen[T], size: Gen[Int] = Gen.chooseNum(0, 100)): Gen[Set[T]] = for {
    size <- size
  } yield Set.fill(size)(elementGen.sample.get)

  /** Generates an arbitrary iterable collection of elements of type `T`.
   *
   * This generator produces either a list or a set of a specified size, filled with random elements generated by the
   * provided `gen` generator. The size of the collection is determined by the provided `sizeGen` generator, which by
   * default generates an integer between 0 and 100.
   *
   * @param gen A generator that produces elements of type `T` to populate the collection.
   * @param sizeGen A generator that determines the size of the collection. Defaults to a generator that produces an
   *                integer between 0 and 100.
   * @tparam T The type of elements in the generated collection.
   * @return A generator that produces an iterable collection (either a list or a set) of random elements of type `T`.
   */
  def arbIterable[T](gen: Gen[T], sizeGen: Gen[Int] = Gen.chooseNum(0, 100)): Gen[immutable.Iterable[Any]] = Gen.oneOf(
    arbList(gen, sizeGen),
    arbSet(gen, sizeGen)
  )

  /** Generates an arbitrary positive integer.
   *
   * This generator produces a random integer between 1 and the specified maximum size. By default, the maximum size is
   * set to [[Int.MaxValue]].
   *
   * @param maxSize The upper limit for the generated integer (inclusive). Defaults to `Int.MaxValue`.
   * @return A generator that produces a positive integer between 1 and `maxSize`.
   */
  def arbPositiveInt(maxSize: Int = Int.MaxValue): Gen[Int] = Gen.chooseNum(1, maxSize)

  extension [T](value: T) {
    /** Provides an extension method `withThis` that allows operations on an object within a block.
     *
     * The `withThis` method takes a function `f` that operates on the value of type `T`. It applies the function `f` to
     * the value but returns the original value `T` after the block executes, allowing for fluent-style modifications or
     * side effect operations without altering the original value.
     *
     * @return The original value `T` after the function `f` has been applied.
     */
    def withThis[U](f: T => U): T = {
      f(value)
      value
    }
  }
}
